// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TransactionService is an autogenerated mock type for the TransactionService type
type TransactionService struct {
	mock.Mock
}

type TransactionService_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactionService) EXPECT() *TransactionService_Expecter {
	return &TransactionService_Expecter{mock: &_m.Mock}
}

// ProcessTransaction provides a mock function with given fields: ctx, sourceID, destID, amount
func (_m *TransactionService) ProcessTransaction(ctx context.Context, sourceID int64, destID int64, amount float64) error {
	ret := _m.Called(ctx, sourceID, destID, amount)

	if len(ret) == 0 {
		panic("no return value specified for ProcessTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, float64) error); ok {
		r0 = rf(ctx, sourceID, destID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionService_ProcessTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessTransaction'
type TransactionService_ProcessTransaction_Call struct {
	*mock.Call
}

// ProcessTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - sourceID int64
//   - destID int64
//   - amount float64
func (_e *TransactionService_Expecter) ProcessTransaction(ctx interface{}, sourceID interface{}, destID interface{}, amount interface{}) *TransactionService_ProcessTransaction_Call {
	return &TransactionService_ProcessTransaction_Call{Call: _e.mock.On("ProcessTransaction", ctx, sourceID, destID, amount)}
}

func (_c *TransactionService_ProcessTransaction_Call) Run(run func(ctx context.Context, sourceID int64, destID int64, amount float64)) *TransactionService_ProcessTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(float64))
	})
	return _c
}

func (_c *TransactionService_ProcessTransaction_Call) Return(_a0 error) *TransactionService_ProcessTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TransactionService_ProcessTransaction_Call) RunAndReturn(run func(context.Context, int64, int64, float64) error) *TransactionService_ProcessTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactionService creates a new instance of TransactionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionService {
	mock := &TransactionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
