// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	model "internal-transfers/internal/model"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

type TransactionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactionRepository) EXPECT() *TransactionRepository_Expecter {
	return &TransactionRepository_Expecter{mock: &_m.Mock}
}

// CreateTransaction provides a mock function with given fields: ctx, tx, transaction
func (_m *TransactionRepository) CreateTransaction(ctx context.Context, tx *sql.Tx, transaction *model.Transaction) error {
	ret := _m.Called(ctx, tx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *model.Transaction) error); ok {
		r0 = rf(ctx, tx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionRepository_CreateTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransaction'
type TransactionRepository_CreateTransaction_Call struct {
	*mock.Call
}

// CreateTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *sql.Tx
//   - transaction *model.Transaction
func (_e *TransactionRepository_Expecter) CreateTransaction(ctx interface{}, tx interface{}, transaction interface{}) *TransactionRepository_CreateTransaction_Call {
	return &TransactionRepository_CreateTransaction_Call{Call: _e.mock.On("CreateTransaction", ctx, tx, transaction)}
}

func (_c *TransactionRepository_CreateTransaction_Call) Run(run func(ctx context.Context, tx *sql.Tx, transaction *model.Transaction)) *TransactionRepository_CreateTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(*model.Transaction))
	})
	return _c
}

func (_c *TransactionRepository_CreateTransaction_Call) Return(_a0 error) *TransactionRepository_CreateTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TransactionRepository_CreateTransaction_Call) RunAndReturn(run func(context.Context, *sql.Tx, *model.Transaction) error) *TransactionRepository_CreateTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransaction provides a mock function with given fields: ctx, transactionID
func (_m *TransactionRepository) GetTransaction(ctx context.Context, transactionID int64) (*model.Transaction, error) {
	ret := _m.Called(ctx, transactionID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransaction")
	}

	var r0 *model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*model.Transaction, error)); ok {
		return rf(ctx, transactionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.Transaction); ok {
		r0 = rf(ctx, transactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionRepository_GetTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransaction'
type TransactionRepository_GetTransaction_Call struct {
	*mock.Call
}

// GetTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionID int64
func (_e *TransactionRepository_Expecter) GetTransaction(ctx interface{}, transactionID interface{}) *TransactionRepository_GetTransaction_Call {
	return &TransactionRepository_GetTransaction_Call{Call: _e.mock.On("GetTransaction", ctx, transactionID)}
}

func (_c *TransactionRepository_GetTransaction_Call) Run(run func(ctx context.Context, transactionID int64)) *TransactionRepository_GetTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *TransactionRepository_GetTransaction_Call) Return(_a0 *model.Transaction, _a1 error) *TransactionRepository_GetTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionRepository_GetTransaction_Call) RunAndReturn(run func(context.Context, int64) (*model.Transaction, error)) *TransactionRepository_GetTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// ListTransactions provides a mock function with given fields: ctx
func (_m *TransactionRepository) ListTransactions(ctx context.Context) ([]*model.Transaction, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListTransactions")
	}

	var r0 []*model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.Transaction, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Transaction); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionRepository_ListTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTransactions'
type TransactionRepository_ListTransactions_Call struct {
	*mock.Call
}

// ListTransactions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *TransactionRepository_Expecter) ListTransactions(ctx interface{}) *TransactionRepository_ListTransactions_Call {
	return &TransactionRepository_ListTransactions_Call{Call: _e.mock.On("ListTransactions", ctx)}
}

func (_c *TransactionRepository_ListTransactions_Call) Run(run func(ctx context.Context)) *TransactionRepository_ListTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TransactionRepository_ListTransactions_Call) Return(_a0 []*model.Transaction, _a1 error) *TransactionRepository_ListTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionRepository_ListTransactions_Call) RunAndReturn(run func(context.Context) ([]*model.Transaction, error)) *TransactionRepository_ListTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
